{"version":3,"file":"dialogue_manager.min.js","sources":["../src/dialogue_manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Manages the question selection form.\r\n *\r\n * @module    atto_embedquestion/dialogue_manager\r\n * @copyright 2018 The Open University\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine([\r\n    'jquery',\r\n    'core/notification',\r\n    'core/fragment',\r\n    'core/templates',\r\n    'core/ajax'\r\n], function(\r\n    $,\r\n    Notification,\r\n    Fragment,\r\n    Templates,\r\n    Ajax\r\n) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Constructor for an object that handles one occurrence of showing the dialogue.\r\n     *\r\n     * @param {EditorPlugin} button - the editor toolbar button that has just been clicked.\r\n     */\r\n    function DialogueHandler(button) {\r\n        var currentSelection, dialogue, existingCode;\r\n\r\n        currentSelection = button.get('host').getSelection();\r\n\r\n        // The wrapper div's loading icon will be replaced with form contents.\r\n        dialogue = button.getDialogue({\r\n            headerContent: M.util.get_string('pluginname', 'atto_embedquestion'),\r\n            focusAfterHide: true\r\n        }, true);\r\n        dialogue.set('bodyContent', '<div class=\"atto_embedquestion-wrap\">' +\r\n                '<img class=\"icon\" src=\"' + M.util.image_url('y/loading') + '\" alt=\"' +\r\n                M.util.get_string('loading', 'atto_embedquestion') + '\">' +\r\n                '</div>');\r\n        dialogue.show();\r\n\r\n        existingCode = button.getEmbedCodeAtSelection();\r\n        if (existingCode) {\r\n            existingCode = existingCode.embedCode;\r\n        }\r\n\r\n        // Replace with the form.\r\n        Fragment.loadFragment('atto_embedquestion', 'questionselector', button.get('contextid'),\r\n                {contextId: button.get('contextid'), embedCode: existingCode}\r\n                ).done(function(html, js) {\r\n                    niceReplaceNodeContents($('.atto_embedquestion-wrap'), html, js, dialogue);\r\n                }\r\n                ).fail(Notification.exception);\r\n\r\n        /**\r\n         * This function fades out one lot of content and fades in some new content.\r\n         *\r\n         * @param {JQuery} node - Element or selector to replace.\r\n         * @param {String} html - HTML to insert / replace.\r\n         * @param {String} js - Javascript to run after the insertion.\r\n         * @returns {Promise} - a promise that resolves when the animation is complete.\r\n         */\r\n        function niceReplaceNodeContents(node, html, js) {\r\n            var promise = $.Deferred();\r\n            node.fadeOut(\"fast\", function() {\r\n                Templates.replaceNodeContents(node, html, js);\r\n                node.fadeIn(\"fast\", function() {\r\n                    promise.resolve();\r\n                    $('#embedqform #id_submitbutton').on('click', getEmbedCode);\r\n                    setupCentring();\r\n                });\r\n            });\r\n            return promise.promise();\r\n        }\r\n\r\n        /**\r\n         * Called after the form in the dialogue has finished loading.\r\n         *\r\n         * Centre the dialogue now, and ensure it re-centres whenever a\r\n         * form section is expanded or collapsed.\r\n         */\r\n        function setupCentring() {\r\n            // TODO we will remove those logic after finish MDL-75781.\r\n            var observer = new ResizeObserver(dialogueResized);\r\n            $('#embedqform fieldset.collapsible').each(function(index, node) {\r\n                observer.observe(node, { attributes: true, attributeFilter: ['class'] });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Re-centre the dialogue.\r\n         */\r\n        function dialogueResized() {\r\n            // When dialog becomes invisible. Do not centering it so we should not scroll lock the screen anymore.\r\n            let attributes = dialogue.getAttrs();\r\n            if (attributes.visible !== false) {\r\n                dialogue.centerDialogue();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Handler for when the form button is clicked.\r\n         *\r\n         * Make an AJAX request ot the server to get the embed code.\r\n         *\r\n         * @param {Event} e - the click event.\r\n         */\r\n        function getEmbedCode(e) {\r\n            e.preventDefault();\r\n            let iframedescription = $('input#id_iframedescription').val();\r\n            let questionidnumber = $('select#id_questionidnumber').val();\r\n\r\n            // Required value of questionidnumber.\r\n            // Note that the form also validates this, and deals with displaying a message to the user.\r\n            if (!questionidnumber) {\r\n                return;\r\n            }\r\n\r\n            // Validate iframedescription.\r\n            // If it is present, then it must have at least 3 characters and a maximum of 100 characters.\r\n            // (It can be left blank to get the default description.)\r\n            // Note that the form also validates this, and deals with displaying a message to the user.\r\n            if (iframedescription.length && (iframedescription.length < 3 || iframedescription.length > 100)) {\r\n                return;\r\n            }\r\n\r\n            Ajax.call([{\r\n                methodname: 'filter_embedquestion_get_embed_code',\r\n                args: {\r\n                    courseid: $('input[name=courseid]').val(),\r\n                    categoryidnumber: $('select#id_categoryidnumber').val(),\r\n                    questionidnumber: questionidnumber,\r\n                    iframedescription: iframedescription,\r\n                    behaviour: $('select#id_behaviour').val(),\r\n                    maxmark: $('input#id_maxmark').val(),\r\n                    variant: $('input#id_variant').val(),\r\n                    correctness: $('select#id_correctness').val(),\r\n                    marks: $('select#id_marks').val(),\r\n                    markdp: $('select#id_markdp').val(),\r\n                    feedback: $('select#id_feedback').val(),\r\n                    generalfeedback: $('select#id_generalfeedback').val(),\r\n                    rightanswer: $('select#id_rightanswer').val(),\r\n                    history: $('select#id_history').val(),\r\n                    forcedlanguage: $('select#id_forcedlanguage').val() || ''\r\n                }\r\n            }])[0].done(insertEmbedCode);\r\n        }\r\n\r\n        /**\r\n         * Handles when we get the embed code from the AJAX request.\r\n         *\r\n         * @param {String} embedCode - the embed code to insert.\r\n         */\r\n        function insertEmbedCode(embedCode) {\r\n            var dialogue, host, parent, text, existingCode;\r\n\r\n            // Hide the dialogue and blank the contents.\r\n            dialogue = button.getDialogue({\r\n                focusAfterHide: null\r\n            });\r\n            dialogue.hide();\r\n\r\n            host = button.get('host');\r\n\r\n            // Focus on the last point.\r\n            host.setSelection(currentSelection);\r\n\r\n            existingCode = button.getEmbedCodeAtSelection();\r\n            if (existingCode) {\r\n                // Replace the existing code.\r\n                parent = host.getSelectionParentNode();\r\n                text = parent.textContent;\r\n                parent.textContent = text.slice(0, existingCode.start) +\r\n                        embedCode + text.slice(existingCode.end);\r\n            } else {\r\n                // Otherwise insert the embed code.\r\n                host.insertContentAtFocusPoint(embedCode);\r\n            }\r\n\r\n            // Mark the text area as updated.\r\n            button.markUpdated();\r\n        }\r\n    }\r\n\r\n    return {\r\n        /**\r\n         * Show the dialogue when the button in a particular editor was clicked,\r\n         * then handle the interaction with it.\r\n         *\r\n         * @param {EditorPlugin} button - the editor toolbar button that has just been clicked.\r\n         */\r\n        showDialogueFor: function(button) {\r\n            new DialogueHandler(button);\r\n        }\r\n    };\r\n});\r\n"],"names":["define","$","Notification","Fragment","Templates","Ajax","DialogueHandler","button","currentSelection","dialogue","existingCode","dialogueResized","getAttrs","visible","centerDialogue","getEmbedCode","e","preventDefault","iframedescription","val","questionidnumber","length","call","methodname","args","courseid","categoryidnumber","behaviour","maxmark","variant","correctness","marks","markdp","feedback","generalfeedback","rightanswer","history","forcedlanguage","done","insertEmbedCode","embedCode","host","parent","text","getDialogue","focusAfterHide","hide","get","setSelection","getEmbedCodeAtSelection","getSelectionParentNode","textContent","slice","start","end","insertContentAtFocusPoint","markUpdated","getSelection","headerContent","M","util","get_string","set","image_url","show","loadFragment","contextId","html","js","node","promise","Deferred","fadeOut","replaceNodeContents","fadeIn","observer","resolve","on","ResizeObserver","each","index","observe","attributes","attributeFilter","niceReplaceNodeContents","fail","exception","showDialogueFor"],"mappings":";;;;;;;AAsBAA,6CAAO,CACH,SACA,oBACA,gBACA,iBACA,cACD,SACCC,EACAC,aACAC,SACAC,UACAC,eASSC,gBAAgBC,YACjBC,iBAAkBC,SAAUC,sBAkEvBC,mBAGsB,IADVF,SAASG,WACXC,SACXJ,SAASK,0BAWRC,aAAaC,GAClBA,EAAEC,qBACEC,kBAAoBjB,EAAE,8BAA8BkB,MACpDC,iBAAmBnB,EAAE,8BAA8BkB,MAIlDC,mBAQDF,kBAAkBG,SAAWH,kBAAkBG,OAAS,GAAKH,kBAAkBG,OAAS,MAI5FhB,KAAKiB,KAAK,CAAC,CACPC,WAAY,sCACZC,KAAM,CACFC,SAAUxB,EAAE,wBAAwBkB,MACpCO,iBAAkBzB,EAAE,8BAA8BkB,MAClDC,iBAAkBA,iBAClBF,kBAAmBA,kBACnBS,UAAW1B,EAAE,uBAAuBkB,MACpCS,QAAS3B,EAAE,oBAAoBkB,MAC/BU,QAAS5B,EAAE,oBAAoBkB,MAC/BW,YAAa7B,EAAE,yBAAyBkB,MACxCY,MAAO9B,EAAE,mBAAmBkB,MAC5Ba,OAAQ/B,EAAE,oBAAoBkB,MAC9Bc,SAAUhC,EAAE,sBAAsBkB,MAClCe,gBAAiBjC,EAAE,6BAA6BkB,MAChDgB,YAAalC,EAAE,yBAAyBkB,MACxCiB,QAASnC,EAAE,qBAAqBkB,MAChCkB,eAAgBpC,EAAE,4BAA4BkB,OAAS,OAE3D,GAAGmB,KAAKC,2BAQPA,gBAAgBC,eACPC,KAAMC,OAAQC,KAAMjC,aAGvBH,OAAOqC,YAAY,CAC1BC,eAAgB,OAEXC,QAETL,KAAOlC,OAAOwC,IAAI,SAGbC,aAAaxC,mBAElBE,aAAeH,OAAO0C,4BAIlBN,MADAD,OAASD,KAAKS,0BACAC,YACdT,OAAOS,YAAcR,KAAKS,MAAM,EAAG1C,aAAa2C,OACxCb,UAAYG,KAAKS,MAAM1C,aAAa4C,MAG5Cb,KAAKc,0BAA0Bf,WAInCjC,OAAOiD,cAxJXhD,iBAAmBD,OAAOwC,IAAI,QAAQU,gBAGtChD,SAAWF,OAAOqC,YAAY,CAC1Bc,cAAeC,EAAEC,KAAKC,WAAW,aAAc,sBAC/ChB,gBAAgB,IACjB,IACMiB,IAAI,cAAe,+DACQH,EAAEC,KAAKG,UAAU,aAAe,UAC5DJ,EAAEC,KAAKC,WAAW,UAAW,sBAFT,YAI5BpD,SAASuD,QAETtD,aAAeH,OAAO0C,6BAElBvC,aAAeA,aAAa8B,WAIhCrC,SAAS8D,aAAa,qBAAsB,mBAAoB1D,OAAOwC,IAAI,aACnE,CAACmB,UAAW3D,OAAOwC,IAAI,aAAcP,UAAW9B,eAC9C4B,MAAK,SAAS6B,KAAMC,cAaGC,KAAMF,KAAMC,QACrCE,QAAUrE,EAAEsE,WAChBF,KAAKG,QAAQ,QAAQ,WACjBpE,UAAUqE,oBAAoBJ,KAAMF,KAAMC,IAC1CC,KAAKK,OAAO,QAAQ,eAiBpBC,SAhBIL,QAAQM,UACR3E,EAAE,gCAAgC4E,GAAG,QAAS9D,cAelD4D,SAAW,IAAIG,eAAenE,iBAClCV,EAAE,oCAAoC8E,MAAK,SAASC,MAAOX,MACvDM,SAASM,QAAQZ,KAAM,CAAEa,YAAY,EAAMC,gBAAiB,CAAC,oBAb1Db,QAAQA,UAtBPc,CAAwBnF,EAAE,4BAA6BkE,KAAMC,OAE/DiB,KAAKnF,aAAaoF,iBAoIzB,CAOHC,gBAAiB,SAAShF,YAClBD,gBAAgBC"}